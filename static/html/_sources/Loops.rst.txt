Loops
=====

**The for loop**

In Python the 'for' loop has the following structure:

.. code::

 for (item) in (iterable):
     (body)

The item is a variable name that can be used in the body and iterable can be a string, list, tuple, sets, or dicts.  Here are some examples:

.. code::

 for item in ['one', 'three', 'five']:
     print(i)

 one
 three
 five

.. code::

 for letter in 'Python':
     print(letter)

 P
 y
 t
 o
 n

.. code::

 my_dict = {'Alex': 60, 'Anthony': 24, 'Erika': 21}
 for key in my_dict.keys():
     print(key + ' is', my_dict[key], 'years old.')
 
 Alex is 60 years old.
 Anthony is 24 years old.
 Erika is 21 years old.

In programs it is common to iterate through a sequence of integers.   Recall the range function, 'range(start, stop, step)', is a iterator that generates integers.   It can be used in a loop like this:

.. code::
 
 for i in range(5):
     print(i)

 0
 1
 2
 3
 4

 vowels = 'aeiou'
 alphabet = 'abcdefghijklmnopqrstuvwxyz'
 consonants = ''
 for let in alphabet:
      if let not in vowels:
      consonants += let
 print('The consonants are:', consonants)

The consonants are: bcdfghjklmnpqrstvwxyz

**The while loop**

The while loop is used when we want to repeat code until a condition is met.  This the structure of the while loop in Python:

.. code::

 while (condition):
     (body)

Here is an example:

.. code::
 
 lst = ['one', 'two', 'three', 'stop', 'four', 'five']
 i = 0
 item = lst[0]
 while item != 'stop':
     print(item)
     i += 1
     item = lst[i]
 one
 two
 three
 
**Using `break`, `continue`, and `else` with a `while`**

The `break` statement will terminate a while loop.   Here is a common idea.   We want to leave it up to the user to continue "playing" until he wants to stop.   Here is some code that uses the while/break to do this.

.. code::

 while True:
     response = input('I will keep going until you input Y or y.\n')
     if response in 'yY':
         break
     print('You input', response, 'so I will keep going.')
 print('You input', response, 'so I stopped.')

 I will keep going until you input Y or y.
 a
 You input a so I will keep going.
 I will keep going until you input Y or y.
 b
 You input b so I will keep going.
 I will keep going until you input Y or y.
 c
 You input c so I will keep going.
 I will keep going until you input Y or y.
 Y
 You input Y so I stopped.

A while loop with continue.   The continue statement will move control of the execution back to the top of the loop.


A while loop with else looks like this:

.. code::

 while (condition):
     (body)
 else:
     (more body)

The `else` statement executes when the condition is false.   One way to use this is to decide whether the while loop was terminated by a break or because the condition failed.

.. code ::

 count = 0
 breaker = 11
 while(count < 10):
     count += 1
     if breaker == count:
         break
 else:
     print('The else has been executed.')
 print('The while loop looped', count,'times.')
 > The else has been executed.
 > The while loop looped 10 times.

Since the condition count < 10 fails the else statement is executes after 10 iterations of the loop.

.. code ::


 count = 0
 breaker = 10
 while(count < 10):
     count += 1
     if breaker == count:
         break
 else:
     print('The else has been executed.')
 print('The while loop looped', count,'times.')

 > The while loop looped 10 times.

With breaker set to 10 the else statement is not executed.  The loop iterates 10 times.   On the last iteration the if condition is met and the loop is exited before the while condition is checked.   


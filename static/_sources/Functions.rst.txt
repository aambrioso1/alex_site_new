Functions
---------
* defining a function
* examples
* doc strings
* Why?



Problem:   
Given a dictionary containing customer number, names, and months spending.   
Find the average amount spent per customer.

customers = 
{'001': ['Alex', 100.00], 
'314': ['Sonya', 25.25], 
'174':['Erika', 30.51], 
'521': ['Anthony', 34.56],
'231': ['Joseph', 13.76]
}

	• basic function syntax
	• the return statement
	• the pass statement
	• value of functions: modularity and reusability
	• arguments
	• positional arguments
	• keyword arguments
	• *args
*kwargs


Define a function that "mirrors" a word:  mirror_string('word') = 'worddrow'


17. (10 points) Write a function, counter(string), that counts all of the left and right parenthesis in a string and outputs a list of two integers for these counts.
For example:
counter('(') = [1, 0]
counter(')))') = [0, 3]
counter('Sci(ence()Olympiad') = [2, 1]

19.  (10 points)  Write a function, trifib(n), that takes a single positive integer, n <= 30, as input and returns a single integer.   The function generates the nth term in this sequence:   1, 1, 1, 3, 5, 9, 17, ....  The first three terms are 1 and after that each term is the sum of the previous three terms.   For example:
trifib(1) = 1 by definition
trifib(3)  =  1 by definition
trifib(4)  =  3   because 1 + 1 + 1 = 3
trifib(8)  =  31 because 5 + 9 + 17 = 31



20.  (10 points)  Write a Python function called sum_of_thirds(int) that takes a positive integer divides it by three, drops the remainder and repeats this process with each divisor. The function then returns the sum of all the quotients. For example:
20 creates the sequence: 6, 2 and the sum is 6 + 2 = 8. So sum_of_thirds(20) = 8.
45 creates the sequence: 15, 5, 1 and the sum is 15 + 5 + 1 = 21. So sum_of_thirds(45) = 21